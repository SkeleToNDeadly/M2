#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define MAX_NAME_LENGTH 50
#define MAX_LN_LENGTH 50
#define MAX_WORK_LENGTH 100
#define MAX_POS_LENGTH 100
#define MAX_PHONE_LENGTH 20
#define MAX_EMAIL_LENGTH 50
#define MAX_SOCIAL_LENGTH 50

struct Contact {
    char first_name[MAX_NAME_LENGTH];
    char last_name[MAX_LN_LENGTH];
    char work_place[MAX_WORK_LENGTH];
    char position[MAX_POS_LENGTH];
    char phone_numbers[MAX_PHONE_LENGTH];
    char email[MAX_EMAIL_LENGTH];
    char social_links[MAX_SOCIAL_LENGTH];
};

struct Node {
    struct Contact contact;
    struct Node* left;
    struct Node* right;
    int height;
};

struct Node* root = NULL;

int max(int a, int b) {
    return (a > b) ? a : b;
}

int getHeight(struct Node* node) {
    if (node == NULL)
        return 0;
    return node->height;
}

int getBalanceFactor(struct Node* node) {
    if (node == NULL)
        return 0;
    return getHeight(node->left) - getHeight(node->right);
}

struct Node* createNode(struct Contact contact) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->contact = contact;
    newNode->left = NULL;
    newNode->right = NULL;
    newNode->height = 1;
    return newNode;
}

struct Node* rightRotate(struct Node* y) {
    struct Node* x = y->left;
    struct Node* T2 = x->right;

    x->right = y;
    y->left = T2;

    y->height = max(getHeight(y->left), getHeight(y->right)) + 1;
    x->height = max(getHeight(x->left), getHeight(x->right)) + 1;

    return x;
}

struct Node* leftRotate(struct Node* x) {
    struct Node* y = x->right;
    struct Node* T2 = y->left;

    y->left = x;
    x->right = T2;

    x->height = max(getHeight(x->left), getHeight(x->right)) + 1;
    y->height = max(getHeight(y->left), getHeight(y->right)) + 1;

    return y;
}

struct Node* insert(struct Node* node, struct Contact contact) {
    if (node == NULL)
        return createNode(contact);

    if (strcmp(contact.first_name, node->contact.first_name) < 0) {
        node->left = insert(node->left, contact);
    } else if (strcmp(contact.first_name, node->contact.first_name) > 0) {
        node->right = insert(node->right, contact);
    } else {
        // При необходимости обрабатывать дубликаты имен
    }

    node->height = 1 + max(getHeight(node->left), getHeight(node->right));

    int balance = getBalanceFactor(node);

    if (balance > 1 && strcmp(contact.first_name, node->left->contact.first_name) < 0)
        return rightRotate(node);

    if (balance < -1 && strcmp(contact.first_name, node->right->contact.first_name) > 0)
        return leftRotate(node);

    if (balance > 1 && strcmp(contact.first_name, node->left->contact.first_name) > 0) {
        node->left = leftRotate(node->left);
        return rightRotate(node);
    }

    if (balance < -1 && strcmp(contact.first_name, node->right->contact.first_name) < 0) {
        node->right = rightRotate(node->right);
        return leftRotate(node);
    }

    return node;
}

void addContact() {
    struct Contact newContact;

    do {
        printf("Введите свое имя ");
    } while (scanf("%49s", newContact.first_name) != 1);

    do {
        printf("Введите свою фамилию: ");
    } while (scanf("%49s", newContact.last_name) != 1);

    printf("Введите место вашей работы: ");
    scanf("%99s", newContact.work_place);
    printf("Введите свою должность: ");
    scanf("%99s", newContact.position);
    printf("Введите свой номер телефона: ");
    scanf("%19s", newContact.phone_numbers);
    printf("Введите свой email: ");
    scanf("%49s", newContact.email);
    printf("Введи ссылку на соц.сеть: ");
    scanf("%49s", newContact.social_links);
    root = insert(root, newContact);
    printf("Контакт добавлен успешно!\n");
}

void displayContactsRec(struct Node* node) {
    if (node == NULL)
        return;

    displayContactsRec(node->left);

        printf("Контакт %d:\n", i + 1);
        printf("Имя: %s\n", contacts[i].first_name);
        printf("Фамилия: %s\n", contacts[i].last_name);
        printf("Месито работы: %s\n", contacts[i].work_place);
        printf("Должность: %s\n", contacts[i].position);
        printf("Телефон: %s\n", contacts[i].phone_numbers);
        printf("Email: %s\n", contacts[i].email);
        printf("Соц.сеть: %s\n", contacts[i].social_links);
        printf("\n");

    displayContactsRec(node->right);
}

void displayContacts() {
    printf("КОНТАКТЫ В ТЕЛЕФОННОЙ КНИГЕ:\n");
    displayContactsRec(root);
}

void freeTree(struct Node* node) {
    if (node == NULL)
        return;

    freeTree(node->left);
    freeTree(node->right);
    free(node);
}

int main() {
    int choice;
    do {
        printf("Телефонная книга:\n");
        printf("1. Добавить контакт\n");
        printf("2. Показать существующие контакты\n");
        printf("3. Выход\n");
        printf("Введите ваш выбор: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                addContact();
                break;
            case 2:
                displayContacts();
                break;
            case 3:
                printf("Выход из телефонной книги.\n");
                break;
            default:
                printf("Вы ввели недопустимый выбор. Пожалуйста попробуйте ещё раз.\n");
        }
    } while (choice != 3);

    freeTree(root); 
    return 0;
}
